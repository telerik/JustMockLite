/*
 JustMock Lite
 Copyright © 2022 Progress Software Corporation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".partial.cs" #>
<#@ include file="..\\TextBuilder.include"#>

using System;
using System.Threading.Tasks;
using Telerik.JustMock.Core;
using Telerik.JustMock.Expectations;
using Telerik.JustMock.Expectations.Abstraction;

namespace Telerik.JustMock
{
    /// <summary>
	/// Defines the expectation for a specific method.
	/// </summary>
    public static partial class AsyncExtensions
    {
        <#
			string commentFormat= "/// <typeparam name=\"T{0}\">Type of the {1} parameter of the anonymous method that this delegate encapsulates</typeparam>";
			
			StringBuilder commentArguments = new StringBuilder();
	
			string[] numberNames = GetNumberNames();
			
			int index = 1; 
			
			foreach (TextBuilder t in GetTextItems(17)) { 
			string funcName = "Func";  
			
			commentArguments.Clear();
				
			for (int commentIndex = 1; commentIndex <= index; commentIndex++)
			{
				commentArguments.AppendFormat(commentFormat, commentIndex, numberNames[commentIndex -1]);
				if(commentIndex < index){
					commentArguments.Append("\r\n\t\t");
				}
			}	
			index++;
		#>
		
		/// <summary>
		/// Specifies the delegate that will execute and return the value for the expected member.
		/// </summary>
		<#= commentArguments.ToString() #>
		/// <typeparam name="TResult">Type of the return value.</typeparam>
		/// <param name="valueFunction">The function that will evaluate the return value.</param>
		/// <returns>Reference to <see cref="IAssertable"/> interface.</returns>
		public static IAssertable ReturnsAsync<<#= t.GenericParameters.ToString() #>, TResult>(this FuncExpectation<Task<TResult>> mock, <#= funcName #><<#= t.GenericParameters.ToString() #>, TResult> valueFunction)
		{
			return ProfilerInterceptor.GuardInternal(() =>
			{
				if (valueFunction == null)
                {
                    return mock.ReturnsAsync(new Func<TResult>(() => default(TResult)));
                }

                return mock.Returns((<#= t.Arguments.ToString() #>) => Task.FromResult(valueFunction(<#= t.ArgList.ToString() #>)));
			});
		}
<# } #>
	}
}